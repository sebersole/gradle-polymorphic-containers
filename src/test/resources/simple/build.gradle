

abstract class ExtensionSpec implements Named {
    private final String name
    abstract Property<String> getZero()
    @javax.inject.Inject
    ExtensionSpec(String name) {
        this.name = name
    }
    @Override
    String getName() {
        return name
    }
}
abstract class ExtensionSpecOne extends ExtensionSpec {
    abstract Property<String> getOne()
    @javax.inject.Inject
    ExtensionSpecOne(String name) {
        super(name)
    }
}
abstract class ExtensionSpecTwo extends ExtensionSpec {
    @javax.inject.Inject
    ExtensionSpecTwo(String name) {
        super(name)
    }
}

class QuarkusSpec {
    private final ExtensiblePolymorphicDomainObjectContainer<ExtensionSpec> extensionSpecContainer

    @javax.inject.Inject
    QuarkusSpec(ObjectFactory objectFactory) {
        extensionSpecContainer = objectFactory.polymorphicDomainObjectContainer( ExtensionSpec )
//        extensionSpecContainer.registerFactory( ExtensionSpec, { objectFactory.newInstance(ExtensionSpec, it) } )
//        extensionSpecContainer.registerFactory( ExtensionSpecOne, { objectFactory.newInstance(ExtensionSpecOne, it) } )
//        extensionSpecContainer.registerFactory( ExtensionSpecTwo, { objectFactory.newInstance(ExtensionSpecTwo, it) } )
        extensionSpecContainer.registerFactory(
                ExtensionSpec,
                new NamedDomainObjectFactory() {
                    @Override
                    ExtensionSpec create(String name) {
                        return objectFactory.newInstance(ExtensionSpec, name)
                    }
                }
        )
        extensionSpecContainer.registerFactory(
                ExtensionSpecOne,
                new NamedDomainObjectFactory() {
                    @Override
                    ExtensionSpecOne create(String name) {
                        return objectFactory.newInstance(ExtensionSpecOne, name)
                    }
                }
        )
        extensionSpecContainer.registerFactory(
                ExtensionSpecTwo,
                new NamedDomainObjectFactory() {
                    @Override
                    ExtensionSpecTwo create(String name) {
                        return objectFactory.newInstance(ExtensionSpecTwo, name)
                    }
                }
        )
    }

    void extensionSpecs(Action<PolymorphicDomainObjectContainer<ExtensionSpec>> action) {
        action.execute( extensionSpecContainer );
    }

    PolymorphicDomainObjectContainer<ExtensionSpec> getExtensionSpecs() {
        return extensionSpecContainer
    }
}

extensions.create( 'quarkus', QuarkusSpec )

quarkus {
    extensionSpecs {
        a(ExtensionSpecOne) {
            zero = 'hello'
            one = 'world'
        }
        b(ExtensionSpecTwo) {
            zero = 'or not'
        }
        c(ExtensionSpecOne) {
            zero = 'bye'
            one = 'for now'
        }
        d {
            zero = 'so long'
        }
    }

}

task qwe {
    doLast {
        quarkus.extensionSpecs.withType( ExtensionSpec ) {
            println "${it.name}: ${it.zero.get()}"
        }
        quarkus.extensionSpecs.withType( ExtensionSpecOne ) {
            println "[One] ${it.name}: ${it.zero.get()} ${it.one.get()}"
        }
        quarkus.extensionSpecs.withType( ExtensionSpecTwo ) {
            println "[Two] ${it.name} ${it.zero.get()}"
        }
    }
}